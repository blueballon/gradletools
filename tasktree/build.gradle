// a simple method to create gradle task dependecy graphs
// (c)2015 Alexander Haas
// Licensed under Apache  License 2.0


defaultTasks ('generateTree')


// these are just dummy tasks to demonstrate the dependency tree
task testTask1
testTask1.description "Test task 1"
testTask1 << { print "Task 1" }

task testTask2
testTask2.description "Test task 2"
testTask2 << { print "Task 2" }

task testTask3
testTask3.description "Test task 3"
testTask3.dependsOn testTask1, testTask2
testTask3 << { print "Task 3" }

task testTask4
testTask4.description "Test task 4"
testTask4.dependsOn testTask3
testTask4 << { print "Task 4" }

task testTask5
testTask5.description "Test task 5"
testTask5.dependsOn testTask1, testTask4
testTask5 << { print "Task 5" }



// build up a task - dependency - map for the current project
def buildDependencyMap () {
    def dependencyMap = [:]
    def taskcontainer = project.tasks
    taskcontainer.findAll().each {
        def taskName = it.getName()
        def taskDeps = it.getTaskDependencies().getDependencies()
        dependencyMap[taskName] = taskDeps
    }
    return (dependencyMap)
}

// print the given map in dot syntax to the given file
def generateDependenciesAsDot(dependencyMap, outputFileName) {
    new File(outputFileName).withWriter { outfile ->
        outfile.writeLine("digraph taskgraph")
        outfile.writeLine("{")
        dependencyMap.each { key, value ->
            // print "$key"
            if (value.isEmpty()) {
                outfile.writeLine("    $key;")
            } else {
                value.each {
                     outfile.writeLine("    $key -> " +  it.getName() + ";")
                }
            }

        }
        outfile.writeLine("}")
    }
}


// this task initiates the tree graph creation
task generateTree  {
    inputs.file "build.gradle"
    outputs.file "testfile.png"
}

generateTree << {
    generateDependenciesAsDot(buildDependencyMap(), "testfile.dot")
    def dotcommand = "/usr/bin/dot -Tpng -otestfile.png testfile.dot".execute()
}
